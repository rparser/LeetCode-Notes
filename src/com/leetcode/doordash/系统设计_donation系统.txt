1，讨论设计需求 - 捐款系统，是否登录前就需要？

FrontEnd->Charity List->Donation Form->Payment Processing->Donation API->RDBMS

2, Entities
User
user_id
first_name
last_name
email
password- hash

Charity
charity_id
name
description

Donation
donation_id
charity_id - FK
user_id / or email is no login is needed
amount
payment_status
donation_time


3, APIs
Charity API - GET /charities - fetch a list of charities
Donation API - POST /donations ->POST /payment/process(Braintree Payments API)
{
  "first_name": "John",
  "last_name": "Doe",
  "email": "john@example.com",
  "charity_id": 101,
  "amount": 50.00,
  "payment_card": {
    "card_number": "4111 1111 1111 1111",
    "expiration_date": "12/25",
    "cvv": "123"
  }
}

if success ->PUT /donations/{donation_id}
{
  "status": "success",
  "transaction_id": "BRAINTREE_TXN_ID_12345"
}
{
  "status": "success",
  "transaction_id": "BRAINTREE_TXN_ID_12345",
  "donation_timestamp": "2023-01-01 10:30:00"
}
{
  "status": "failure",
  "error_message": "Insufficient funds"
}

4,Security Considerations

5, Database
RDBMS存储
Redis辅助as the list of charities, to reduce database load.

6,失败处理
1. **Payment Processing Failure:** 支付失败
   - Scenario: The Payment Processing service fails to process the payment due to network issues, server downtime, or other technical problems.
   - Handling: Implement proper error handling and retries in the Payment Processing service to handle temporary failures. If the payment cannot be processed after a certain number of retries, inform the user about the issue and request them to try again later or use an alternative payment method.重试多次后如果依然失败，通知用户

2. **Invalid Donation Data:**表单无效
   - Scenario: The user submits invalid or incomplete donation data through the Donation Form.
   - Handling: Validate the donation data on the client-side and server-side to ensure that all required fields are filled correctly. Provide meaningful error messages to guide the user in correcting the data. Additionally, perform data validation in the Donation API to reject invalid or malicious requests.在客户端就可以验证数据，服务器端也能验证，无效后通知用户。

3. **Database Connection Error:**数据库连接超时
   - Scenario: The Donation API is unable to establish a connection with the Database (RDBMS) due to database server issues or network problems.
   - Handling: Implement proper error handling and retries for database connections. If the connection cannot be established, return an error response to the SPA, indicating a temporary issue. Log the error for further investigation and resolution.
   不需要通知用户，记录错误 - 可以将信息先放入cache-异步处理数据库更新-数据库有自己的重试机制

4. **Payment Processing Timeout:**付款超时
   - Scenario: The Payment Processing service takes too long to respond, leading to a timeout.
   - Handling: Set appropriate timeout limits for the API calls to the Payment Processing service. If the service does not respond within the specified time, consider it as a failure and inform the user that the payment could not be processed at the moment. Suggest retrying later or using an alternative payment method.
   通知用户稍后重试

5. **Duplicate Donation Submission:** 重复提交
   - Scenario: The user accidentally submits the same donation multiple times due to a slow response or double-clicking the "Donate" button.
   - Handling: Implement safeguards in the Donation API to prevent duplicate donations from being recorded. Use techniques like token-based request validation or Idempotency keys to identify duplicate requests and reject them without creating duplicate entries in the Database. 幂等技术Idempotency keys

6. **Data Integrity Issues:**
   - Scenario: Data integrity issues arise due to data corruption, failed transactions, or bugs in the system.
   - Handling: Implement proper transaction handling in the Donation API and database operations to ensure data integrity. Use database constraints and validations to prevent inconsistent data. Monitor the system for potential issues, and perform regular data integrity checks and backups to detect and correct data problems if they occur.

7. **API Rate Limiting:** API速度
   - Scenario: The API receives an excessive number of requests from a single user or IP address, affecting system performance.
   - Handling: Implement rate limiting mechanisms in the Donation API to prevent abuse and ensure fair usage. Limit the number of requests a user or IP address can make within a specific time window. Return appropriate error responses when rate limits are exceeded. -限制速度和ip地址的请求数量

8. **Charity API Unavailability:** API不可用
   - Scenario: The Charity API is unavailable due to server issues or maintenance.
   - Handling: Implement proper error handling in the SPA to handle cases when the Charity API is down. Display a user-friendly message to inform users that charity information is currently unavailable and encourage them to try again later.
   -提示友好消息告知不可用且稍后重试
-可以设置成如果成功发邮件通知



Cache缓存
以下是常用的缓存类型：

1. **内存缓存（In-Memory Cache）：** 最常见的缓存类型，使用内存存储数据，读写速度非常快。常用的内存缓存解决方案有 Redis 和 Memcached。
2. **分布式缓存（Distributed Cache）：** 将缓存数据分布式地存储在多个节点上，提供更好的扩展性和高可用性。多个应用程序可以共享同一个缓存资源。常见的分布式缓存解决方案有 Redis 和 Hazelcast。
3. **页面缓存（Page Cache）：** 用于缓存页面的 HTML 内容，减少对后端服务器的频繁请求。常用于静态网页或内容不经常变化的页面。
4. **CDN 缓存（Content Delivery Network Cache）：** 全球分布式缓存网络，用于缓存静态资源（如图片、CSS、JavaScript 等）。将这些资源缓存在临近用户的边缘服务器上，加速资源的传输和访问。
5. **数据库查询缓存（Database Query Cache）：** 缓存数据库查询的结果，避免重复执行相同的查询操作，减少数据库负载并提高响应时间。一些数据库系统支持这种功能。
6. **对象缓存（Object Cache）：** 在应用程序层面对对象或数据进行缓存。可以是特定的数据对象或序列化的数据。通常与内存缓存结合使用。
7. **写缓存（Write-through Cache）和写后读缓存（Write-behind Cache）：** 写缓存将写入的数据直接写入缓存，并随后写入后端存储。写后读缓存将写入的数据先写入缓存，然后延迟写入后端存储。这些缓存策略用于处理写操作的场景。


1, 确定Product requirement document - PRD
提出问题 - 需要登录吗？成功或失败的反馈？历史记录如何保存？

估算RPS request per second - 巅峰流量 peak 10倍
一天有86400秒 约等于100k -
如果每天有1亿用户 - 100m/100k = 1000RPS  10倍是10k RPS
如果每天有100万用户 1m / 100k = 10RPS 10倍是100RPS


几个内容：
1，availability (improved via redundancy) 可用性通过冗余改进
2，latency (not super important here) 延迟
3，throughput (improved via partitioning) 吞吐量通过分区改进
4，consistency (eventual, read after write) 一致性 - 最终，写入后读取

2. 确定data models/entities还有几个API
ACID属性 - transactionality
Single responsibility principle - 单一责任原则
eventual state consistency  如何确定
webhook/event

3,设计system architecutre - component diagrams
In-session

4, Failure Scenarios -retries
Timeouts 超时
Database shutdown
Monitor Data inconsistencies - 监控数据不一致
Idempotency 幂等性 确保只发送一次(do not refresh the page - purchase is processing)
Primary nodes fail - use replica
Split-brain 是什么？
Replication lag需要控制
Kafka


5, Scale
Partitioning - by hash of user_id - 因为Range会带来hot spot -某个范围会hit同一个partition


6,缓存 cache
7, event streaming
8, cache aside, read/write through caches/ read heavy
9. serverless (lambda) / RDBMS and NOSQL 时间短 Lambda and nosql
10,异步通信
11，预写日志Write Ahead Log（WAL）-防止写入出错方便回退
https://cloud.tencent.com/developer/article/1623123
12, Back Pressure背压 - 队列填满返回503 - 异步


Elasticsearch mapreduce

CAP理论P是必须的
所以要CP 比如Zookeeper -  出问题卡死-比如银行 - 分片（比如ABC保存不同的表格）的系统都是CP-因为ABC的不同任务必须一次性完成-必须回退
或AP比如Eureka -出问题继续访问不同数据-迁就外部服务-replica可以是AP或CP（回退）
整个系统并不一定完全C或A - 比如银行流水必须C但用户地址可以A

BASE理论 - Basic Availability - Soft State - Eventual Consistency -NoSql数据库
最终一致性



https://1o24bbs.com/t/topic/4242
设计推特







只和doordash相关
1, NGINX - 读音engine X 是web server - Application Hosting
Nginx vs apache - 同步异步阻塞
https://cloud.tencent.com/developer/article/1635326
load balancing solutions

2, Cloudflare - Assets and Media

3, Redis - Data Store
内存数据库 MongoDB是硬盘数据库
https://developer.aliyun.com/article/38224
https://juejin.cn/post/6844903997556408334
Redis 内置对非阻塞、异步、主/副本复制的支持，以确保高水平的数据可用性
基于内存的缓存比如 Memcached 和 Redis 是应用程序和数据存储之间的一种键值存储。
Redis可以当消息队列？


4, Django - jungo - d不发音 - Python based web框架 -前端

5, Redux

6, AWS Lambda - Application Hosting -serverless争取提到


7, AWS CloudFront - Assets and Media

8, Kotlin

9, Retool - Application Hosting

10, CockRoachDB - 数据库



Utilities:
1, Stripe - payment
2, Twillo SendGrid - send email - 发邮件通知 加进系统设计名词-争取提到
3, Optimizely - Analytics
4, Segment - Analytics

DevOps:
1, Docker -devops
2, Jenkins -devops
3, Kubernetes -devops
4, Webpack -devops
5, New Relic - monitoring
6, Yarn -devops
7, Sentry - monitoring

